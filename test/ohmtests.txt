~Supposed to pass~

x : [ number | joolean | number | number | number ] @ 12 ;

x : << number|string :: joolean>> @ 12 ;

hotChocolate:string @ `debt`;

so (julian = `cool guy`) {
  howItBe ideal;
}

cap (chocolate in pulp) {
  chocolate++;
}

cap(hotChocolates in debt) {
    overheard(`I owe you ` + hotChocolates + ` for this.`);
}

overheard(`Youâ€™re farming overheards again!`);

noCap(bob < 5) {
    bob++;
    overheard(`Number of squids on floor: ` + mangle(bob, string));
}

noCap (bob = !0) {
  so (bob = 3) {
    frogOut;
  }
  frogIn;
}

cats:list @ [`shadow`, `cookie`, `tiny`, `wobble`];

debt:[number] @ [2, 3, 1, 5, 3];

aString:string @ mangle(you, string);

x: <<num|string::jool|number>> @ <<1::true, `2`::1>>;

do gluStringTogether(bob:string, /, job:number, yob:number) -> string {
    bobble:number @ job + yob;
	howItBe bob + mangle(bobble, string);
}

gluStringTogether(`No`, job:4, yob:3);

so (x = 1) {
    so (x < 1) {
    	so (x <= 1) {
            so (x > 1) {
            	so (x >= 1) {
                    so (x != 1) {
                    	overheard(`We compared a lot!`);
                    }
                }
            }
        }
    }
}
               
        
        

~Not supposed to pass~

wrong:string @ "use the tick mark!";

so (julian @ `cool guy`) {
  howItBe ideal;
}

name:string = `julian`

aJulian @ `hat`

alex:number @ 21

pigeon:joolean @ !!ideal;

so (so (so (ideal))) {
    overhear(`ideal`);
}

noCap (noCap( ideal)) {
    ideal;
}

noCap () {
    ideal;
}

