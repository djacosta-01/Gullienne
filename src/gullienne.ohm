Gullienne {
    Program     = Statement+
    Statement   = VarDec
                | Reassign
                | ReassignMy
                | If
                | FunctDec
                | ForLoop
                | WhileLoop
                | Break
                | Continue
                | Return
                | ObjectHead
                | (Exp2_objMethod | Exp2_functCall) ";" --standalone
                | id ("++" | "--") ";" --incDec
    
    VarDec      = id ":" Type ("@" ExpFull)? ";"
    Reassign    = id "@" ExpFull ";"
    ReassignMy  = my "." id "@" ExpFull ";"
    FunctDec    = do id "(" ListOf<DecParam, ","> ")" "->" Type FuncBlock
    FuncBlock   = "{" Base* Statement* "}"
    If          = so "(" ExpFull ")" GenBlock ElseIf* Else?
    ElseIf      = but "(" ExpFull ")" GenBlock
    Else        = otherwise GenBlock
    ForLoop     = cap "(" id "in" (id | ExpFull) ")" GenBlock
    WhileLoop   = noCap "(" ExpFull ")" GenBlock
    Return      = howItBe (ExpFull)? ";"
    Break       = frogOut ";"
    Continue    = frogIn ";"
    
    ObjectHead  = object id "(" ListOf<RealParam, ","> ")" ObjectBlock
    ConstrucDec = construct "(" ListOf<RealParam, ","> ")" GenBlock
    ObjectBlock = "{" Base* ConstrucDec* MethodDec* "}"
    MethodDec   = do "#"?id "(" ListOf<DecParam, ","> ")" "->" Type FuncBlock
    
    Base        = bayes id "@" ExpFull ";"
    GenBlock    = "{" Statement* "}"
    
    RealParam   = id ":" Type
    DecParam    = RealParam
                | "/"
    CallArg     = id ":" ExpFull --kwarg
                | ExpFull --parg
                
    ListLit     = "[" ListOf<ExpFull, ","> "]"
    SetLit      = "<" ListOf<ExpFull, ","> ">"
    MapLit      = "<<" ListOf<KeyValue, ","> ">>"
    KeyValue    = ExpFull "::" ExpFull
                
    ExpFull     = Exp8 "|" Exp8 --joolOr
                | Exp8
    Exp8        = Exp7 "&" Exp7 --joolAnd
                | Exp7
    Exp7        = Exp6 ("=" | "!=") Exp6 --eqNeq
                | Exp6
    Exp6        = Exp5 ("<=" | ">=" | "<" | ">") Exp5 --glte
                | Exp5
    Exp5        = Exp5 ("+" | "-" | union | intersect) Exp4 --addDubUnionInter
                | Exp4
    Exp4        = Exp4 ("*" | "/" | "%") Exp3 --mulDivRem
                | Exp3
    Exp3        = Exp2 "^" Exp3 --expo
                | ("!" | "-") Exp3 --neg
                | Exp2
    Exp2        = Exp2 "[" ExpFull "]" --listInd
                | Exp2 "<<" ExpFull ">>" --mapInd
                | Exp2 "<" ExpFull ">" --setInd
                | Exp2 "(" ListOf<CallArg, ","> ")" --functCall
                | ~digit Exp2 "." id "(" ListOf<CallArg, ","> ")" --objMethod
                | ~digit Exp2 "." id --objField
                | imagine Type "(" ListOf<CallArg, ","> ")" --objMake
                | Exp1
    Exp1        = numeral | strlit | joolean | id
                | ListLit | MapLit | SetLit | my
                | "(" ExpFull ")" --expr
        
    id          = ~keyword letter (alnum|"_")*
    Type        = Type "|" Type --sumType
                | "[" Type "]" --listType
                | "<" Type ">" --setType
                | "<<" Type "::" Type ">>" --mapType
                | "number" | "joolean" | "string"
                | "NUMBER" | "JOOLEAN" | "STRING"
                | letter+ --custom
                
    keyword     = do | so | but | otherwise | cap | noCap
                | frogOut | frogIn | howItBe | ideal
                | object | bayes | construct | imagine | my
                | union | intersect
        
    do          = "do" ~id
    so          = "so" ~id
    but         = "but" ~id
    otherwise   = "otherwise" ~id
    cap         = "cap" ~id
    noCap       = "noCap" ~id
    frogOut     = "frogOut" ~id
    frogIn      = "frogIn" ~id
    howItBe     = "howItBe" ~id
    ideal       = "ideal" ~id
    object      = "object" ~id
    bayes       = "bayes" ~id
    construct   = "constructor" ~id
    imagine     = "imagine" ~id
    my          = "my" ~id
    union       = "union" ~id
    intersect   = "intersect" ~id
    
    comment     = "~" (~"~" any)* "~"
    numeral     = digit+ ("." digit+)?
    strlit      = "`" (~"`" any)* "`"
    joolean     = ideal

    space      += comment
}